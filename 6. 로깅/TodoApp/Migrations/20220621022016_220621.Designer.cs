// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoApp.DbContexts;

#nullable disable

namespace TodoApp.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20220621022016_220621")]
    partial class _220621
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("TodoApp.Entities.TodoChangedHistory", b =>
                {
                    b.Property<int>("TodoSeq")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("After")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Before")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChangedKind")
                        .HasColumnType("INTEGER");

                    b.HasKey("TodoSeq", "Seq");

                    b.ToTable("TodoChangedHistory");
                });

            modelBuilder.Entity("TodoApp.Entities.TodoInfo", b =>
                {
                    b.Property<int>("Seq")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("CompleteDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("TodoDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Seq");

                    b.HasIndex("UserId");

                    b.ToTable("TodoInfo");
                });

            modelBuilder.Entity("TodoApp.Entities.TodoTagInfo", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descption")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("TodoTagInfo");
                });

            modelBuilder.Entity("TodoApp.Entities.UserInfo", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("TodoInfoTodoTagInfo", b =>
                {
                    b.Property<string>("TagsTagId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TodosSeq")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagsTagId", "TodosSeq");

                    b.HasIndex("TodosSeq");

                    b.ToTable("TodoInfoTodoTagInfo");
                });

            modelBuilder.Entity("TodoApp.Entities.TodoChangedHistory", b =>
                {
                    b.HasOne("TodoApp.Entities.TodoInfo", "Todo")
                        .WithMany("Histories")
                        .HasForeignKey("TodoSeq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Todo");
                });

            modelBuilder.Entity("TodoApp.Entities.TodoInfo", b =>
                {
                    b.HasOne("TodoApp.Entities.UserInfo", "User")
                        .WithMany("Todos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoInfoTodoTagInfo", b =>
                {
                    b.HasOne("TodoApp.Entities.TodoTagInfo", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoApp.Entities.TodoInfo", null)
                        .WithMany()
                        .HasForeignKey("TodosSeq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoApp.Entities.TodoInfo", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("TodoApp.Entities.UserInfo", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
